# 선형회귀

## 데이터 준비
import matplotlib.pyplot as plt
population_inc = [0.3,-0.78,1.26,0.03,1.11,15.17,0.24,-0.24,-0.47,-0.77,-0.37,
                  -0.85,-0.41,-0.27,0.02,-0.76,2.66]
population_old = [12.27,14.44,11.87,18.75,17.52,9.29,16.37,19.78,19.51,12.65,
                  14.74,10.72,21.94,12.83,15.51,17.14,14.42]
population_inc = population_inc[:5] + population_inc[6:] # 5번째 제거
population_old = population_old[:5] + population_old[6:]
plt.plot(population_inc,population_old,'bo') # x들,y들
plt.xlabel('Population Growth Rate')
plt.ylabel('Elderly Population Rate')
plt.show()

## 본격적인 선형회귀
import tensorflow as tf
import numpy as np
import random
X = population_inc
Y = population_old

a = tf.Variable(random.random()) # a라는 기울기를 랜덤으로 초기화
b = tf.Variable(random.random())

def compute_loss() : # 잔차 제곱합을 구해주는 함수 만들어줌
  # 아무것도 안 넣어주네..
  y_pred = a*X + b
  loss = tf.reduce_mean((Y - y_pred) ** 2) # 차의 제곱합 주는 함수
  return loss

optimizer = tf.optimizers.Adam(lr=0.07) # 최적화 함수 만들어줌
for i in range(1000) :
  optimizer.minimize(compute_loss, var_list=[a,b]) # 여기에 넣어준다

  if i % 100 == 99 :
    print(i,'a: ',a.numpy(),'b: ',b.numpy(),'loss: ',compute_loss().numpy())
    # 개꿀로 a,b를 숫자화하고 심지어 함수값까지

line_x = np.arange(min(X),max(X),0.01) # x축 만들기 / arange 개꿀
line_y = a * line_x + b # 실제 회귀선

plt.plot(line_x,line_y,'r-')
plt.plot(X,Y,'bo')
plt.xlabel('Population Growth Rate(%)')
plt.ylabel('Elderly Population Rate(%)')
plt.show()

